#!/usr/bin/python3
# coding: utf-8
################################################################################
# CIFID, desenvolvido em Python. Um programa para identificar e decifrar
# diversos padrões de cifra
# Dev: VandalVnl -> GitHub: https://github.com/vandalvnl
# Colaboradores: GR, MrZero, Tron, Hiker
import sys, string, locale, re, base64, random, math
from itertools import starmap, cycle

alfabeto = ["A","B","C","D","E","F","G","H","I","J","K","L","L","M","N","O","P",
            "Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","l","m","n","o","p","q","r","s","t","u","v","w",
            "x","y","z"]
dezena = ["1","2","3","4","5","6","7","8","9","0"]
# especialChar = ["=",]
###############################################################################
#Mapa do VetorLetra: Vetor que contém o valor de todos os caracteres imprimíveis
# da tabelas ASCII:
#[A] = 0 [B] = 1 [C] = 2 [D] = 3 [E] = 4 [F] = 5 [G] = 6 [H] = 7 [I] = 8 [J] = 9
#[K] = 10 [L] = 11 [L] = 12 [M] = 13 [N] = 14 [O] = 15 [P] = 16 [Q] = 17 [R]= 18
#[S] = 19 [T] = 20 [U] = 21 [V] = 22 [W] = 23 [X] = 24 [Y] = 25 [Z] = 26 [a]= 27
#[b] = 28 [c] = 29 [d] = 30 [e] = 31 [f] = 32 [g] = 33 [h] = 34 [i] = 35 [j]= 36
#[k] = 37 [l] = 38 [l] = 39 [m] = 40 [n] = 41 [o] = 42 [p] = 43 [q] = 44 [r]= 45
#[s] = 46 [t] = 47 [u] = 48 [v] = 49 [w] = 50 [x] = 51 [y] = 52 [z] = 53
#[(space)]=54 [1] = 55 [2] = 56 [3] = 57 [4] = 58 [5] = 59 [6] = 60 [7] = 61
#[8] = 62  [9] = 63 [0] = 64

############################### Banner&&MenuHelp ###############################
def banner():
    print(""" _       ____  _____  ________________  ________  __________
| |     / / / / /   |/_  __/ ____/ __ \/  _/ __ \/_  __/ __ \\
| | /| / / /_/ / /| | / / / /   / /_/ // // /_/ / / / / / / /
| |/ |/ / __  / ___ |/ / / /___/ _, _// // ____/ / / / /_/ /
|__/|__/_/ /_/_/  |_/_/  \____/_/ |_/___/_/     /_/  \____/
    """)


def getMsg(idmsg, string):
    if linguagem == 'pt_br':
        msgBR(idmsg, string)
    else:
        msgEN(idmsg, string)

def msgBR(idmsg, string):
    brDict={"bacons":"\nCifra de Bacons ou Chave Baconica...",
            "analise":"\nAnálise da string: %s"%string,
            "chave":"\nA cifra possui chave: %s"%string,
            "Binarios":"\nCodificação Binária",
            "failb64":"\nNão foi identificado %s"%string,
            "base64":"\nO código base64: %s"%string,
            "hexadecimal":"\nO texto é hexadecimal",
            "cesar":"\nCifra de César [%s]"%string,
            "vigenere":"\nCifra de Vigenère [%s]"%string,
            "help":"""Uso: whatcripto [escrita cifrada]
\rParâmetro de uso:
\r-k, --key:
\r\tInforme para quando houver uma chave para a cifra
\rExemplo de uso:
\rroot@uname[~]# whatacripto 'Tqxxa Tmowqd'
\r\t[12]-> Hello Hacker"""
            }
    print(brDict[idmsg])

def msgEN(idmsg, string):
    enDict={"bacons":"Baconian cipher...",
            "analise":"\nAnalysis of the String: %s"%string,
            "chave":"\nCipher key: %s"%string,
            "Binarios":"\nCodificação Binária",
            "failb64":"\nCannot Resolve %s"%string,
            "base64":"\nThis string [%s] it's a base64"%string,
            "hexadecimal":"\nThis string it's a hexadecimal",
            "cesar":"\nCaesar Cipher[%s]"%string,
            "vigenere":"\nVigenère Cipher[%s]"%string,
            "help":"""Uso: whatcripto [escrita cifrada]
\rParâmetro de uso:
\r-k, --key:
\r\tInforme para quando houver uma chave para a cifra
\rExemplo de uso:
\rroot@uname[~]# whatacripto 'Tqxxa Tmowqd'
\r\t[12]-> Hello Hacker"""
            }
    print(enDict[idmsg])

def getKey(short,long):
    exp = re.compile(long)
    chave = exp.findall(texto)
    if len(chave) == 0:
        exp = re.compile(short)
    chave = exp.findall(texto)
    return chave

def argumentSearch(key):
    key = ''.join(key).strip()
    cont, chave = 0, ""
    newlist = sys.argv
    for a in sys.argv:
        b = a.startswith(key)
        if b == True:
            chave = sys.argv[cont+1]
            newlist.remove(key)
            newlist.remove(chave)
            newlist.remove(sys.argv[0])
        cont+=1
    return chave, newlist
############################### Miscle Alg Detect ##############################
def getLetra(frase, letra):
    pilha = frase.count(letra)
    return pilha

def getEspaco(frase):
    espaco = frase.count(" ")
    return espaco

def getNumbers(frase,numero):
    numero = frase.count(numero)
    return numero

def setNlen(tamanho, string):
    cont, listaLetra = 1, []
    if string.find(" ") == -1:
        for letra in string:
            listaLetra.append(letra)
            if (cont % tamanho) == 0:
                listaLetra.append(" ")
            cont+=1
        string = ''.join(listaLetra).strip()
    return string

def somahexa(texto):
    hexa = (lenChar[55]+lenChar[64]+lenChar[54]+lenChar[0]+lenChar[1])
    hexa += (lenChar[3]+lenChar[4]+lenChar[5]+lenChar[27]+lenChar[28])
    hexa += (lenChar[30]+lenChar[31]+lenChar[32]+lenChar[56]+lenChar[57])
    hexa += (lenChar[58]+lenChar[59]+lenChar[60]+lenChar[61]+lenChar[62])
    hexa += (lenChar[63]+lenChar[2]+lenChar[29])
    return hexa
############################### Cypher Alg Detect ##############################

    ############################ Morse Cypher ############################
def decodeMorse(code, positionInString):
    if positionInString <= len(code):
        morseLetter = ""
        for key,char in enumerate(code[positionInString:]):
            if char == " ":
                positionInString = key + positionInString + 1
                letter = inverseMorseAlphabet[morseLetter]
                return letter + str(decodeMorse(code, positionInString))
            else:
               morseLetter += char
        else:
            return ""
    ########################### Baconian Cypher ##########################
def Baconian(a,b,A,B,espacos,frase):
    baconiandict={"AAAAA":"A","AAAAB":"B", "AAABA":"C", "AAABB":"D","AABAA":"E",
    "AABAB":"F", "AABBA":"G", "AABBB":"H", "ABAAA":"I","ABAAA":"J","ABAAB":"K",
    "ABABA":"L","ABABB":"M","ABBAA":"N", "ABBAB":"O","ABBBA":"P", "ABBBB":"Q",
    "BAAAA":"R", "BAAAB":"S", "BAABA":"T","BAABB":"U","BAABB":"V", "BABAA":"W",
    "BABAB":"X","BABBA":"Y","BABBB":"Z"}
    new = ""
    for cifrabacon in frase.split():
        if len(cifrabacon) != 5:
            print("Cifra de Bacon exige 5 caracteres por caractere")
            exit()
        elif cifrabacon not in baconiandict.keys():
            print("""Este caractere não existe em Cifra Baconica.
            \rVerifique seu input""")
            exit()
        new = new + baconiandict.get(cifrabacon)
    return (new)
    ########################### Binary Cypher ###########################
def Bynaries(lista,base):
    cont,string = 0,[]
    while cont < len(lista):
        binario = bin(int(lista[cont]))
        binario = binario[2:len(binario)]
        decimal = int(str(binario),base)
        decimal = int(str(decimal),base)

        if decimal > 31:
            decimal = chr(decimal)
            string.append(decimal)
        cont+=1
    if len(string) == 0:
        return None
    return string
    ########################### xBases Cypher ###########################
def xBase(lista,base):
    cont,string, = 0,[]
    letra = ""
    for elementos in lista:
        numero = int(elementos,base)
        if numero > 1100000:
            return None
        letra = chr(int(elementos,base))
        string.append(letra)
    if string == None and string == "" and string == " ":
        return None
    if ''.join(string).isalnum():
        return ''.join(string)

    ########################### Base64 Cipher ###########################
def bases3264(texto):
    try:
        encoding = str.encode(texto)
        codes = base64.b64decode(encoding, altchars=None, validate=False)
        getMsg("base64",texto)
        return codes
    except:
        pass

    ########################### Base64 Cipher ###########################
def baseTranslate(string):
    try:
        if string.find("=") != -1:
            string = string.replace("=","").replace(" ","")
            if string.find("/") != -1 or string.find("+") != -1:
                string = bases3264(string)
        else:
            if string.isalnum() == True:
                string = bases3264(string)
        return string
    except:
        pass

    ########################## Vigenere Cipher ##########################
def vigenereCipher(message, key):
    def dec(c,k):
        return chr(((ord(c) - ord(k) - 2*ord('A')) % 26) + ord('A'))

    return "".join(starmap(dec, zip(message, cycle(key))))

    ########################### Caesar Cipher ###########################
def cesarCif(texto, key):
	text_list = list(texto)
	text_encrypt = ""
	for cont in text_list:
		if (cont >= 'a' and cont <= 'z') or (cont>= 'A' and cont <= 'Z'):
			if (cont >= 'a' and cont <= 'z'):
				ord_c = (ord(cont) - ord('a') - key) % 26
				text_encrypt += chr(ord_c + ord('a'))
			else:
				ord_c = (ord(cont) - ord('A') - key) % 26
				text_encrypt += chr(ord_c + ord('A'))
		else:
			text_encrypt += cont
	return text_encrypt

### Definição da linguagem de execução do programa, tratamento de argumentos ###
banner()
linguagem = locale.getdefaultlocale()[0].lower()
if len(sys.argv) == 1:
    getMsg("help","None")
    exit()
elif sys.argv[1] in "-h" or sys.argv[1] in "--help":
    getMsg("help","None")
    exit()

texto = sys.argv[1:len(sys.argv)]
texto = ' '.join(texto).strip()

tmpkey = getKey("-k","--key")
if tmpkey == "" or tmpkey == None or tmpkey == []:
    key = None
else:
    tmpkey = argumentSearch(tmpkey)
    key = tmpkey[0]
    texto = ' '.join(tmpkey[1])

################################## ___MAIN___ ##################################
lenChar = []
# possibilidades é a variável de contagem de semelhança dos tipos de cifra
possibilidades = 0
##### Varrer todo o vetor para identificar letras do alfabeto: UPPER/lower #####
for letra in alfabeto:
    lenChar.append(getLetra(texto,letra))

espaco = getEspaco(texto)
lenChar.append(espaco)

########### Varrer todo o vetor para identificar todos os algarismos ###########
for num in dezena:
    lenChar.append(getNumbers(texto,num))

########### Varrer todo o vetor para identificar todos char especiais ##########
getMsg("analise",texto)
    ########################### Baconian Cypher ##########################
if(lenChar[0]+lenChar[1]+lenChar[27]+lenChar[28]+lenChar[54]) == len(texto):
    texto = texto.upper()
    if lenChar[54] == 0:
        texto = setNlen(5, texto)
    getMsg("bacons",texto)
    AB=Baconian(lenChar[0],lenChar[1],lenChar[27],lenChar[28],lenChar[54],texto)
    print("->",AB)
    possibilidades+=1

    ############################## base64 ###############################
if(lenChar[55]+lenChar[64]+lenChar[54]) != len(texto):
    if (len(texto) % 4) == 0 and texto.count("=") > 0:
        try:
            base = bases3264(texto)
        except:
            pass
        print('->',base)
        possibilidades+=1
    elif (len(texto) % 4) == 0:
        try:
            base = baseTranslate(texto)
            print('->',base)
            possibilidades+=1
        except:
            pass
if '.' in texto and '-' in texto:
    morseAlphabet = { "A" : ".-","B" : "-...","C" : "-.-.",
            "D" : "-..","E" : ".","F" : "..-.","G" : "--.",
            "H" : "....","I" : "..","J" : ".---","K" : "-.-",
            "L" : ".-..","M" : "--","N" : "-.","O" : "---",
            "P" : ".--.","Q" : "--.-","R" : ".-.","S" : "...",
            "T" : "-","U" : "..-","V" : "...-","W" : ".--",
            "X" : "-..-","Y" : "-.--","Z" : "--.."," " : "/",
            "1" : ".----","2" : "..---","3" : "...--","4" : "....-",
    	    "5" : ".....","6" : "-....","7" : "--...","8" : "---..",
    	    "9" : "----.","0" : "-----","." : ".-.-.-","," : "--..--",
            ":" : "---...","?" : "..--..","'" : ".----.","-" : "-....-",
            "/" : "-..-.","@" : ".--.-.","=" : "-...-"
    }
    text = "/ 0123456789.,:?'-/@="
    morseAlfa = ["a","b","c","d","e","f","g","h","i","j",
                "k","l","m","n","o","p","q","r","s","t",
                "u","v","w","x","y","z","á","à","ã","è",
                "é","ẽ","í","ì","ĩ","ó","ò","õ","ú","ù","ũ"
    ]
    inverseMorseAlphabet=dict((v,k) for (k,v) in morseAlphabet.items())
    informacao = texto
    testCode = texto.replace(" /","")
    temporario = texto
    if informacao in text or informacao.isalnum() or " " in informacao:
        inverseMorseAlphabet=dict((v,k) for (k,v) in morseAlphabet.items())
        informacao = informacao.replace("/-","/ -")
        informacao = informacao.replace("/.","/ .")
        informacao = informacao.replace("-/","- /")
        informacao = informacao.replace("./",". /")
    letras,contador = 0,0
    for letratxt in morseAlfa:
        if temporario[letras] == morseAlfa[contador].lower():
            print ("Erro de sintaxe...")
            exit()
    temp = 0
    decodado = decodeMorse(testCode + " ", temp)
    print (decodado)
    possibilidades+=1
    exit()
    ######################### Bynary Cypher ##########################
if(lenChar[55]+lenChar[64]+lenChar[54]) == len(texto):
    if lenChar[54] == 0:
        limite = 9
    else:
        limite = 2
    getMsg("Binarios",texto)
    copytext = "%s" % texto
    for cont in range(1,limite):
        tmp = setNlen(cont, copytext).split()
        binario = Bynaries(tmp,2)
        cont = 0
        if binario != None:
            cont+=1
    if cont != 0:
        print("-> " + ''.join(binario))
    possibilidades+=1
        ####################### Hexadecimal Cypher #######################
hexa = somahexa(texto)
verifica = []
if hexa == len(texto):
    copytext = texto.replace(' ','')
    for cont in range(1,16):
        if len(copytext) < cont:
            break
        tmp = setNlen(cont, copytext).split()
        another = xBase(tmp,16)
        if another != None and another != " "  and another != "":
            verifica.append(another)
    if len(verifica) > 0:
        getMsg("hexadecimal",texto)
        possibilidades+=1
        print('->',verifica)
    possibilidades+=1
        ####################### Caesar Cypher #######################
if texto.isalnum:
    getMsg("cesar",texto)
    for cont in range(1,26):
        print('[%s]->'%cont,cesarCif(texto, cont))
    possibilidades+=1

if texto.isalpha and possibilidades < 3 and key != None:
    getMsg('vigenere',texto)
    tmp = texto.lower().replace(' ','')
    cifra = vigenereCipher(tmp,key.lower())
    cont, esp = 0,[]
    for numero in texto:
        if numero == " ":
            esp.append(cont)
        cont+=1
    cifra = list(cifra)
    for cont in esp:
        cifra.insert(cont,' ')
    cifra = ''.join(cifra).lower()
    print(cifra)
    possibilidades+=1
