#!/usr/bin/python3
# coding: utf-8

import sys
from filters.stdin import stdin
from filters.sanitize import sanitize
from ciphers.Identifier import Identifier
from ciphers.NumericBase import NumericBase
from filters.text_identifier import text_identifier


def banner():
    print()
    print("""██╗    ██╗██╗  ██╗ █████╗ ████████╗ ██████╗██████╗ ██╗██████╗ ████████╗ ██████╗
██║    ██║██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝██╔═══██╗
██║ █╗ ██║███████║███████║   ██║   ██║     ██████╔╝██║██████╔╝   ██║   ██║   ██║
██║███╗██║██╔══██║██╔══██║   ██║   ██║     ██╔══██╗██║██╔═══╝    ██║   ██║   ██║
╚███╔███╔╝██║  ██║██║  ██║   ██║   ╚██████╗██║  ██║██║██║        ██║   ╚██████╔╝
 ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝    ╚═════╝
Desenvolvedor: @vandalvnl - github.com/vandalvnl
Agradecimentos: Equipe KurupiraOS
Versão 2.0.1
""")


def help_user(script):
    print("""\rParâmetro de uso:
    \r-k, --key:
    \r\tInforme para quando houver uma chave para a cifra
    \rExemplo de uso:
    \rroot@uname[~]# """ + script + """ 'Tqxxa Tmowqd'
    \r\t[12]-> Hello Hacker
    """)


banner()
script = sys.argv[0].replace("./", "")
args_given = sys.argv[1:]

if '-h' in args_given or '--help' in args_given:
    help_user(script)
    exit()

if len(args_given) == 0:
    help_user(script)
    exit()

key = ""
if stdin.get_opt(args_given, ['-k', '--key']):
    key = stdin.get_opt_value(args_given, ['-k', '--key'])
    if key in args_given:
        args_given.remove(key)
    try:
        args_given.remove('-k')
    except:
        args_given.remove('--key')

pure_text_total = []
args_given = ' '.join(args_given).strip()
identifier = Identifier(args_given)
print("Análise da Cifra: " + sanitize.print_nonone(args_given))
if len(key) > 0:
    print("Foi informada uma chave: " + sanitize.print_nonone(key) + '\n')

if text_identifier.is_numeric(args_given):
    if identifier.cipher_bin():
        from ciphers.Binaries import Binaries
        text = Binaries(args_given)
        pure_text = Binaries.decipher(text)
        if len(pure_text) > 1:
            for add in pure_text:
                pure_text_total.append(add)
        else:
            pure_text_total.append(pure_text)
    else:
        if identifier.cipher_octal():
            text = NumericBase(args_given, 8, 3)
            pure_text_total.append(NumericBase.decipher(text))
else:
    if len(key) > 0:
        from ciphers.Vigenere import Vigenere
        text = Vigenere(args_given, key)
        pure_text_total.append(Vigenere.decipher(text))
    else:
        if identifier.cipher_hexa():
            text = NumericBase(args_given, 16)
            pure_text_total.append(NumericBase.decipher(text))
            if identifier.cipher_baconian():
                from ciphers.Baconian import Baconian
                text = Baconian(args_given.upper())
                pure_text_total.append(Baconian.decipher(text))
        else:
            if identifier.cipher_base64():
                from ciphers.Base64 import Base64
                text = Base64(args_given)
                base64 = Base64.decipher(text)
                pure_text_total.append(str(base64)[2:-3])
            if identifier.cipher_caesar():
                choice = input("Cesar e RailFence geram muitas saídas, deseja realizar? [S/n] ")
                print()
                if choice is "S" or choice is "s":
                    from ciphers.Caesar import Caesar
                    from ciphers.RailFence import RailFence
                    text = Caesar(args_given)
                    for correct in Caesar.decipher(text):
                        pure_text_total.append(correct)
                    text = RailFence(args_given)
                    for correct in RailFence.decipher(text):
                        pure_text_total.append(correct)
            if identifier.cipher_morse():
                from ciphers.Morse import Morse
                text = Morse(args_given)
                pure_text_total.append(Morse.decipher(text))
            if identifier.cipher_hackerize():
                from ciphers.HackerizeXs import HackerizeXs
                text = HackerizeXs(args_given)
                pure_text_total.append(HackerizeXs.decipher(text))
if len(pure_text_total) > 0 and not pure_text_total is []:
    pure_text_total = list(set(pure_text_total))
    for pure in pure_text_total:
        print("\r[+] => " + sanitize.print_nonone(str(pure)),end="")
print()
